{"pages":[],"posts":[{"title":"CentOS 7 部署 NFS Server","text":"创建 NFS 服务端后才能够正常使用 NFS 文件系统。本文介绍了在 CentOS 7 系统中安装 NFS 服务器的过程，并给出了 NFS 客户端的相关配置 一、概述 NFS（Network File System）：通过网络让不同的机器/操作系统共享文件，一般用来共享静态数据 二、部署 NFS 服务端1234567891011121314151617181920212223242526272829# 1. 关闭防火墙$ systemctl stop firewalld &amp;&amp; systemctl disable firewalld# 2. 安装 nfs-utils 和 rpcbind（NFS 客户端也安装）$ yum install -y nfs-utils rpcbind# 3. 创建用于共享数据的文件夹$ mkdir /data/nfs$ chown -R nfsnobody:nfsnobody /data/nfs # TODO 用户影响？# 4. 配置 NFS Server：指定共享文件夹目录以及能够使用共享文件夹的网段$ vi /etc/exports# `NFS共享目录 NFS客户端地址1(参数1,参数2,...) 客户端地址2(参数1,参数2,...)`# /data/nfs 10.17.102.0/24(rw,async,no_root_squash)/data/nfs *(rw,async,no_root_squash) # 对所有 IP 都有效# 5. 启动 NFS Server$ systemctl restart rpcbind$ systemctl enable nfs &amp;&amp; systemctl restart nfs# 6. 测试$ showmount -e 10.17.102.29 # 查看是否有可用的 NFS 地址Export list for 10.17.102.29:/data/nfs *$ nfsstat -s # 查看服务端 NFS 信息Server rpc stats:calls badcalls badclnt badauth xdrcall2822050 0 0 0 0... 1. 服务端配置 常用选项： ro：客户端挂载后，其权限为只读，默认选项 rw：读写权限 sync：同步将数据写入到内存与硬盘中 async：异步，优先将数据保存到内存，然后再写入硬盘 secure：要求请求源的端口小于 1024 用户映射： root_squash：当 NFS 客户端使用 root 用户访问时，映射到 NFS 服务器的匿名用户 no_root_squash：当 NFS 客户端使用 root 用户访问时，映射到 NFS 服务器的 root 用户 all_squash：全部用户都映射为服务器端的匿名用户 anonuid=UID：将客户端登录用户映射为此处指定的用户 uid anongid=GID：将客户端登录用户映射为此处指定的用户 gid 三、部署 NFS 客户端12345678910$ yum install -y nfs-utils rpcbind$ mkdir -p /data/nfs-data# -t nfs：使用nfs协议# -o：挂载选项## nolock：不阻塞## vers=4：NFS版本号为4$ mount -t nfs -o nolock,vers=4 10.17.102.29:/data/nfs /data/nfs-data$ df -h # 查看挂载$ umount /data/nfs-data # 卸载挂载$ nfsstat -c # 查看客户端 NFS 信息","link":"/Linux/centos7-nfs-server.html"},{"title":"Windows OpenSSH 密钥管理","text":"适用于 Windows Server 2019、Windows 10、Windows Server 2022 文章完成了对 Windows 上的 OpenSSH 使用基于密钥的身份验证所需的配置。完成此项后，用户可以从具有私钥的任何客户端连接到 sshd 主机 1. 常见身份认证 Windows 环境中的大多数身份验证都是使用用户名/密码对完成的，这非常适用于共享公共域的系统。跨域工作时（例如在本地和云托管的系统之间），很容易受到暴力攻击入侵 相比之下，Linux 环境通常使用公钥/私钥对来驱动身份验证，这不要求使用可推测的密码。OpenSSH 提供了工具来帮助支持此用途，具体如下： ssh-keygen：用于生成安全的密钥 ssh-agent 和 ssh-add：用于安全地存储私钥 scp 和 sftp：在首次使用服务器时安全地复制公钥文件 2. 密钥对概述 密钥对指的是由特定的身份验证协议使用的公钥和私钥文件 SSH 公钥身份验证使用不对称加密算法来生成两个密钥文件：一个为“私钥”文件，一个为“公钥”文件 私钥：等效于密码，在所有情况下都应当保护它们。如果有人获取了你的私钥，则他们可以像你一样登录到你有权登录的任何 SSH 服务器 公钥：放置在 SSH 服务器上，并且可以共享，不会危害私钥的安全 将密钥身份验证用于 SSH 服务器时，SSH 服务器和客户端会依据私钥来比较所提供的用户名的公钥。 如果无法依据客户端私钥验证服务器端公钥，则身份验证失败 可以通过密钥对实现多重身份验证，方法是在生成密钥对时输入密码。在身份验证期间，会提示用户输入密码，将使用该密码以及 SSH 客户端上的私钥来对用户进行身份验证 3. 主机密钥生成 首先需要安装 OpenSSH 服务器，参考 OpenSSH 入门 公钥具有特定的 ACL 要求，在 Windows 上，这些要求等同于仅允许管理员和 System 进行访问。首次使用 sshd 时，将自动生成主机的密钥对 默认情况下，sshd 服务设置为手动启动。若要在每次重新启动服务器时启动它，请从服务器上的 PowerShell 中运行以下命令： 12345# Set the sshd service to be started automatically$ Get-Service -Name sshd | Set-Service -StartupType Automatic# Now start the sshd service$ Start-Service sshd 由于没有与 sshd 服务关联的用户，因此主机密钥存储在 C:\\ProgramData\\ssh 下 4. 用户密钥生成 若要使用基于密钥的身份验证，首先需要为客户端生成公钥/私钥对 ssh-keygen.exe 用于生成密钥文件，并且可以指定算法 DSA、RSA、ECDSA 或 Ed25519。如果未指定算法，则使用 RSA。建议使用强算法和密钥长度 以下为使用 Ed25519 算法生成密钥文件的流程： 12345678910111213141516171819202122232425262728$ ssh-keygen -t ed25519Generating public/private ed25519 key pair.Enter file in which to save the key (C:\\Users\\Test/.ssh/id_ed25519):Enter passphrase (empty for no passphrase):Enter same passphrase again:Your identification has been saved in C:\\Users\\Test/.ssh/id_ed25519.Your public key has been saved in C:\\Users\\Test/.ssh/id_ed25519.pub.The key fingerprint is:SHA256:GBoxfWOjq/ss1GziqAOeqlQgYcYKSBV1x8hxinSRTUQ test@DESKTOP-GQT4EP9The key's randomart image is:+--[ED25519 256]--+|=+.o=+.=@E ||=o .o=+Oo ||+. ...= o ||o . o.o || ..o..S ||. . o = ||o..+ + ||oo. +. ||*o .+o |+----[SHA256]-----+$ cd C:\\Users\\Test\\.ssh$ dirMode LastWriteTime Length Name---- ------------- ------ -----a---- 2021/11/18 18:50 411 id_ed25519 # 私钥-a---- 2021/11/18 18:50 103 id_ed25519.pub # 公钥-a---- 2021/11/17 15:44 92 known_hosts 私钥文件等效于密码，应当采用与保护密码相同的方式来保护它。为了实现此目的，请使用 ssh-agent 来将私钥安全地存储在与你的 Windows 登录关联的 Windows 安全上下文中 为执行该操作，请以管理员身份启动 ssh-agen 服务并使用 ssh-add 来存储私钥： 123456789101112# By default the ssh-agent service is disabled. Allow it to be manually started for the next step to work.# Make sure you're running as an Administrator.$ Get-Service ssh-agent | Set-Service -StartupType Manual# Start the service$ Start-Service ssh-agent# This should return a status of Running$ Get-Service ssh-agent# Now load your key files into ssh-agent$ ssh-add ~\\.ssh\\id_ed25519 完成这些步骤后，每当从此客户端进行身份验证需要使用私钥时，ssh-agent 都会自动检索本地私钥，并将其传递到你的 SSH 客户端 强烈建议你将私钥备份到一个安全位置，将其添加到 ssh-agent，然后将其从本地系统中删除。如果使用了强算法（例如此示例中的 Ed25519），则无法从代理中检索私钥 如果你失去了对私钥的访问权限，则必须在你与之交互的所有系统上创建一个新的密钥对并更新公钥 5. 部署公钥 若要使用上面创建的用户密钥，需要将公钥 ~\\.ssh\\id_ed25519.pub 的内容放置在服务器上的一个文本文件中，其名称和位置取决于用户帐户是本地管理员组的成员还是标准用户帐户 (1) 标准用户 公钥 ~\\.ssh\\id_ed25519.pub 的内容需放置在服务器上的一个名为 authorized_keys 的文本文件中，该文件位于 C:\\Users\\username\\.ssh\\ OpenSSH 客户端包括了 scp 来帮助实现此目的，这是一个安全的文件传输实用工具。以下示例将公钥复制到服务器 12345# Make sure that the .ssh directory exists in your server's user account home folder$ ssh username@domain1@contoso.com mkdir C:\\Users\\username\\.ssh\\# Use scp to copy the public key file generated previously on your client to the authorized_keys file on your server$ scp C:\\Users\\Test\\.ssh\\id_ed25519.pub user1@domain1@contoso.com:C:\\Users\\username\\.ssh\\authorized_keys (2) 管理用户 公钥 ~\\.ssh\\id_ed25519.pub 的内容需放置在服务器上的一个名为 administrators_authorized_keys 的文本文件中，该文件位于 \\ 此文件上的 ACL 需要配置为仅允许访问管理员和系统。以下示例将公钥复制到服务器并配置 ACL 12345678# Make sure that the .ssh directory exists in your server's user account home folder$ ssh user1@domain1@contoso.com mkdir C:\\ProgramData\\ssh\\# Use scp to copy the public key file generated previously on your client to the authorized_keys file on your server$ scp C:\\Users\\Test\\.ssh\\id_ed25519.pub user1@domain1@contoso.com:C:\\ProgramData\\ssh\\administrators_authorized_keys# Appropriately ACL the authorized_keys file on your server$ ssh --% user1@domain1@contoso.com icacls.exe &quot;C:\\ProgramData\\ssh\\administrators_authorized_keys&quot; /inheritance:r /grant &quot;Administrators:F&quot; /grant &quot;SYSTEM:F&quot; 此示例演示了创建 administrators_authorized_keys file 的步骤。如果多次运行，则每次都会覆盖此文件。若要为多个管理用户添加公钥，需将此文件附加到每个公钥 参考 OpenSSH 入门 适用于 Windows 的 OpenSSH 密钥管理 | Microsoft Docs NIST 文档 IR 7966","link":"/Win/win-ssh-keygen.html"},{"title":"GitHub + Hexo 搭建个人网站详细教程","text":"文章介绍了使用 GitHub + Hexo（icarus 主题）搭建个人网站的详细教程，包括环境准备、项目初始化、项目运行、构建、部署等具体操作，给出了 icarus 主题的各项配置案例，并且对项目源码进行了个性化修改 1. 环境准备 Node.js（&gt;=10.13）：http://nodejs.org/ Git：http://git-scm.com/ 123456789101112131415161718192021$ npm install hexo-cli -g$ hexo -vhexo-cli: 4.3.0os: win32 10.0.17763node: 16.13.0v8: 9.4.146.19-node.13uv: 1.42.0zlib: 1.2.11brotli: 1.0.9ares: 1.17.2modules: 93nghttp2: 1.45.1napi: 8llhttp: 6.0.4openssl: 1.1.1l+quiccldr: 39.0icu: 69.1tz: 2021aunicode: 13.0ngtcp2: 0.1.0-DEVnghttp3: 0.1.0-DEV 2. 初始化项目 官网：https://ppoffice.github.io/hexo-theme-icarus/ 12345678$ hexo init blog$ cd blog$ git clone https://github.com/ppoffice/hexo-theme-icarus.git themes/icarus -b 4.3.0 --depth 1$ hexo config theme icarus$ hexo server$ npm install --save hexo-deployer-git # 部署时用到$ npm install 若报错 err: Error: Cannot find module 'babel-plugin-inferno'，可删除 node_modules/ 和 package-lock.json，再执行 npm install 3. Hexo 常用命令12345678910# 启动$ hexo s [-i 192.168.1.1] [-p 5000]# 清除缓存$ hexo clean# 新建博文$ hexo n &quot;title&quot;# 生成结果$ hexo g# 部署$ hexo d 4. 配置文件设置_config.page.yml 1widgets: null _config.post.yml 123456789101112131415widgets: - position: left type: toc index: false collapsed: false depth: 3 - position: left type: adsense client_id: 'ca-pub-3689070375600295' slot_id: '8031940281'sidebar: left: sticky: true _config.icarus.ymlversion: 4.0.0variant: cyberpunklogo: /img/logo.svghead: favicon: /img/logo.svg # https://developer.mozilla.org/en-US/docs/Web/Manifest manifest: name: LB477 short_name: LB start_url: theme_color: background_color: display: standalone icons: - src: '' sizes: '' type: # https://hexo.io/docs/helpers.html#open-graph open_graph: title: type: blog url: image: site_name: author: description: twitter_card: twitter_id: twitter_site: google_plus: fb_admins: fb_app_id: # https://developers.google.com/search/docs/guides/intro-structured-data structured_data: title: description: url: author: publisher: publisher_logo: image: meta: - '' rss: navbar: menu: Home: / Categories: /categories Tags: /tags Archives: /archives #About: /about links: Download on GitHub: icon: fab fa-github url: 'https://github.com/liubin477'footer: links: Creative Commons: icon: fab fa-creative-commons url: 'https://creativecommons.org/' Attribution: icon: fab fa-creative-commons-by url: 'https://creativecommons.org/licenses/by/4.0/' Noncommercial: icon: fab fa-creative-commons-nc url: 'https://creativecommons.org/licenses/by-nc/4.0/'article: highlight: # https://github.com/highlightjs/highlight.js/tree/master/src/styles theme: rainbow clipboard: true fold: unfolded readtime: false licenses: Creative Commons: icon: fab fa-creative-commons url: 'https://creativecommons.org/' Attribution: icon: fab fa-creative-commons-by url: 'https://creativecommons.org/licenses/by/4.0/' Noncommercial: icon: fab fa-creative-commons-nc url: 'https://creativecommons.org/licenses/by-nc/4.0/'# https://ppoffice.github.io/hexo-theme-icarus/categories/Plugins/Search/search: type: insight# https://ppoffice.github.io/hexo-theme-icarus/categories/Plugins/Comment/comment: type: valine app_id: *** app_key: *** placeholder: &quot;（づ￣3￣）づ╭❤～&quot; avatar: wavatar avatar_force: false meta: [&quot;nick&quot;, &quot;mail&quot;, &quot;link&quot;] page_size: 10 lang: zh-CN visitor: false highlight: true record_ip: true server_urls: emoji_cdn: emoji_maps: enable_qq: false required_fields: []# https://ppoffice.github.io/hexo-theme-icarus/categories/Plugins/Donation/donates: - type: alipay qrcode: '/img/alipay.png' - type: wechat qrcode: '/img/wechat.png'# https://ppoffice.github.io/hexo-theme-icarus/categories/Plugins/Share/share: type: addtoanysidebar: left: sticky: false right: sticky: false# http://ppoffice.github.io/hexo-theme-icarus/categories/Widgets/widgets: - position: left type: profile author: LB author_title: location: Mars avatar: /img/head.jpg avatar_rounded: true gravatar: follow_link: 'https://github.com/liubin477' social_links: Github: icon: fab fa-github url: 'https://github.com/liubin477' CNBlogs: icon: fas fa-edit url: 'https://www.cnblogs.com/lb477' - position: left type: archives - position: right type: categories - position: right type: tags - position: right type: recent_posts - position: left type: adsense client_id: 'ca-pub-3689070375600295' slot_id: '8031940281'# -# position: left# type: links# links:# Hexo: 'https://hexo.io'# Bulma: 'https://bulma.io'# # Google FeedBurner email subscription widget configurations# -# position: left# type: subscribe_email# # Hint text under the email input# description: # # Feedburner ID# feedburner_id: ''# https://ppoffice.github.io/hexo-theme-icarus/categories/Plugins/plugins: # Enable page startup animations animejs: true # Show the &quot;back to top&quot; button back_to_top: true # https://tongji.baidu.com baidu_analytics: tracking_id: *** # https://www.bing.com/toolbox/webmaster/ bing_webmaster: tracking_id: *** # http://busuanzi.ibruce.info busuanzi: true # CNZZ statistics # https://www.umeng.com/web cnzz: id: *** web_id: *** # https://www.osano.com/cookieconsent/ cookie_consent: # The compliance type. Can be &quot;info&quot;, &quot;opt-in&quot;, or &quot;opt-out&quot; type: info # Theme of the popup. Can be &quot;block&quot;, &quot;edgeless&quot;, or &quot;classic&quot; theme: edgeless # Whether the popup should stay static regardless of the page scrolls static: false # Where on the screen the consent popup should display position: bottom-left # URL to your site's cookie policy policyLink: 'https://www.cookiesandyou.com/' gallery: true # https://analytics.google.com google_analytics: tracking_id: # https://www.hotjar.com/ hotjar: site_id: # https://katex.org/ katex: false # https://www.mathjax.org/ mathjax: false # http://outdatedbrowser.com/ outdated_browser: false # Show a progress bar at top of the page on page loading progressbar: true # https://statcounter.com/ statcounter: project: security: # https://business.twitter.com/en/help/campaign-measurement-and-analytics/conversion-tracking-for-websites.html twitter_conversion_tracking: pixel_id: # https://ppoffice.github.io/hexo-theme-icarus/Configuration/icarus-user-guide-cdn-providers/providers: cdn: jsdelivr fontcdn: google iconcdn: fontawesome _config.yml 12345678910111213# ...url: https://lb477.xyzpermalink: :title.htmlpermalink_defaults:pretty_urls: trailing_index: true # Set to false to remove trailing 'index.html' from permalinks trailing_html: true # Set to false to remove trailing '.html' from permalinksdeploy: type: git repo: git@github.com:liubin477/liubin477.github.io.git branch: master 5. 不显示文件更新时间themes/icarus/layout/common/article.jsx 1234{/* Last Update Date */}{/*page.updated &amp;&amp; &lt;span class=&quot;level-item&quot; dangerouslySetInnerHTML={{ __html: _p('article.updated_at', `&lt;time dateTime=&quot;${date_xml(page.updated)}&quot; title=&quot;${new Date(page.updated).toLocaleString()}&quot;&gt;${date(page.updated)}&lt;/time&gt;`)}}&gt;&lt;/span&gt;*/} 6. 设置文章绝对发布时间themes/icarus/source/js/main.js 12345// if (typeof moment === 'function') {// $('.article-meta time').each(function() {// $(this).text(moment($(this).attr('datetime')).fromNow());// });// } 7. 页面整体宽度调整themes/icarus/include/style/responsive.styl 12345678910111213+widescreen() .is-1-column .container, .is-2-column .container max-width: $desktop width: $desktop+fullhd() .is-2-column .container max-width: $widescreen width: $widescreen .is-1-column .container max-width: $desktop width: $desktop themes/icarus/layout/common/widgets.jsx 12case 2: return 'is-4-tablet is-4-desktop is-3-widescreen'; themes/icarus/layout/layout.jsx 12'is-8-tablet is-8-desktop is-9-widescreen': columnCount === 2,'is-8-tablet is-8-desktop is-6-widescreen': columnCount === 3 8. 文章图片居中themes/icarus/source/js/main.js 1$(this).wrap('&lt;a class=&quot;gallery-item&quot; style=&quot;display:block;text-align:center;&quot; href=&quot;' + $(this).attr('src') + '&quot;&gt;&lt;/a&gt;'); 9. 部署到 GitHub 在 GitHub 上新建仓库 &lt;username&gt;.github.io 设置 SSH 密钥：Windows OpenSSH 密钥管理 10. 解决主题文件夹无法提交到 Github1234567891011121314$ git rm --cache themes/icarus$ rm -rf themes/icarus/.git$ git statusOn branch masterYour branch is up to date with 'origin/master'.Changes to be committed: (use &quot;git restore --staged &lt;file&gt;...&quot; to unstage) deleted: themes/icarusUntracked files: (use &quot;git add &lt;file&gt;...&quot; to include in what will be committed) themes/","link":"/Other/hexo-icarus-config.html"},{"title":"使用 PicGo 和 Github 自建免费图床","text":"写博客会经常与图片打交道，因此图床是一个不得不考虑的话题。网上有不少三方的，但是用起来总不如自己构建的放心，本文介绍了使用 PicGo 和 GitHub 构建免费好用且稳定的自建图床 一、概述 PicGo 是一个用于快速上传图片并获取图片 URL 链接的工具 PicGo 本体支持如下图床： 七牛图床 v1.0 腾讯云 COS v4\\v5 版本 v1.1 &amp; v1.5.0 又拍云 v1.2.0 GitHub v1.5.0 SM.MS V2 v2.3.0-beta.0 阿里云 OSS v1.6.0 Imgur v1.6.0 特色功能 支持拖拽图片上传 支持快捷键上传剪贴板里第一张图片 Windows 和 MacOS 支持右键图片文件通过菜单上传 (v2.1.0+) 上传图片后自动复制链接到剪贴板 支持自定义复制到剪贴板的链接格式 支持修改快捷键，默认快速上传快捷键：command+shift+p（macOS）| control+shift+p（Windows\\Linux) 支持插件系统，已有插件支持 Gitee、青云等第三方图床 更多第三方插件以及使用了 PicGo 底层的应用可以在 Awesome-PicGo 找到 支持通过发送 HTTP 请求调用 PicGo 上传（v2.2.0+) 下载网址：https://github.com/Molunerfinn/PicGo 二、Github 配置1. 创建 Github 仓库 创建一个 public 的 Github 仓库，仓库名为 blog-images。过程略 2. 创建访问令牌 直接访问 https://github.com/settings/tokens，点击 Generate new token 按照下图配置创建即可 三、PicGo 配置 点击左侧的图床设置，找到 Github 图床，配置如下： 可选：在 PicGo 设置中开启上传前重命名 四、Typora 配置","link":"/Other/picgo-github-images.html"},{"title":"PotPlayer 个性化配置","text":"本文介绍了 PotPlayer 播放器的安装、播放选项配置、音频/视频解码器/渲染器配置等 一、简介 PotPlayer 是 KMPlayer 原作者姜勇囍进入新公司 Daum（韩国科技巨头 Kakao Corp 并购）之后推出的，继承了 KMPlayer 所有的优点，拥有异常强大的内置音视频解码器，可以支持几乎全部音乐、视频文件格式的播放。采用 VC++ 进行了全面重构，并且原生支持 64 位操作系统；凭借硬件加速、流畅优秀的全高清视频播放效果、强大的选项、滤镜、外挂式管理、DXVA 等硬件解码，以及非常丰富且强大的设置选项，被誉为 Win 平台上最优秀的免费影音全能格式播放器 硬件加速：支持 DXVA、CUDA、QuickSync 等，以最少的资源制造最华丽的表现 3D/VR：支持大量不同型号的 3D 眼镜，连接电视或电脑立即享受 3D 视觉盛宴。支持 Side by Side、Top and Bottom、Page Flipping 等输出 字幕：支持文字字幕 SMI、SRT、Vobsub(DVD)、蓝光 SUP 字幕等多种字幕资源。支持 ASS/SSA 动画以及 SMI ruby tag 解码器：无需再麻烦地安装各种全能编解码器。支持 OpenCodec，用户自定义添加需要的编解码器 高级功能： 多个文件一次性读取，流畅播放 双声卡时，可自定义输出 各时间段截图方便快速切换到不同场景 提供特定场景添加并管理书签、章节功能 支持 Direct3D9 Ex Flip Mode、Overlay 功能 支持其它硬件设备播放（DVD、TV、HDTV） 二、安装 链接：https://pan.baidu.com/s/1VCfBLBsNULmBvuPWq1ADbA 提取码：vlyx PotPlayer 工具包中包括 PotPlayer 播放器安装包、LAV Filters（分离/解码器）、madVR（视频渲染器）、xy-VSFilter（通用字幕插件）、xy-SubFilter（madVR 专用字幕插件）等 1. 安装 PotPlayer 播放器 安装路径：D:\\App\\PotPlayer 2. 安装 LAV Filters 分离解码器 安装路径：D:\\App\\PM Players 注册：以管理员权限运行依次运行三个文件夹中的 install*.bat 文件 三、配置 想要得到好的画质效果，就必须要对 PotPlayer 播放器的默认方案进行更改。其中 TAB 键可以调出 OSD 菜单 EVR 渲染器是 PotPlayer 播放器自带的渲染器，一般国内的暴风影音、迅雷播放器都是用的之中很菜的渲染器，播放的画质很一般，这里会将其替换为 LAV Filters 方案 1. 播放配置 这里主要对进度条进行配置 2. 滤镜配置 关闭默认滤镜配置 载入并添加下载好的 LAV Filters 分离解码器 源滤镜/分离器全部换成 LAV Splitter Source（无法切换保持原状即可，下同） 视频解码器全部换成 LAV Video Decoder 音频解码器全部换成 LAV Audio Decoder 3. 视频配置 madVR 视频渲染器配置 madVR 是 Win 平台最强大的视频渲染器，媲美顶级蓝光机 色彩空间/属性配置 4. 声音配置 音频渲染器配置 WASAPI 音频渲染器具有程序独占，抗干扰，延迟低的优点 关闭规格化，避免 Potplayer 擅自改变音量 5. Decoder 配置 在属性中点击相应 Decoder 即可进入其配置界面 LAV Video Decoder 配置 软解，顾名思义就是 CPU 处理器解码；硬解是显卡解码 解码方案优先级推荐：CPU 软解 &gt; D3D11 = DXVA2(copy-back) = IntelQuickSnyc &gt; DXVA2(native) &gt; NVIDIA CUVID LAV Audio Decoder 配置 6. 其他 直播源导入：添加 -&gt; 添加文件 参考 https://www.bilibili.com/read/cv6470674/ https://github.com/imDazui/Tvlist-awesome-m3u-m3u8","link":"/Other/potplayer-config.html"}],"tags":[{"name":"CentOS","slug":"CentOS","link":"/tags/CentOS/"},{"name":"NFS","slug":"NFS","link":"/tags/NFS/"},{"name":"Win","slug":"Win","link":"/tags/Win/"},{"name":"SSH","slug":"SSH","link":"/tags/SSH/"},{"name":"Git","slug":"Git","link":"/tags/Git/"},{"name":"Blog","slug":"Blog","link":"/tags/Blog/"},{"name":"Software","slug":"Software","link":"/tags/Software/"}],"categories":[{"name":"Linux","slug":"Linux","link":"/categories/Linux/"},{"name":"Win","slug":"Win","link":"/categories/Win/"},{"name":"Other","slug":"Other","link":"/categories/Other/"}]}