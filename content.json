{"pages":[],"posts":[{"title":"CentOS 7 部署 NFS Server","text":"创建 NFS 服务端后才能够正常使用 NFS 文件系统。本文介绍了在 CentOS 7 系统中安装 NFS 服务器的过程，并给出了 NFS 客户端的相关配置 一、概述 NFS（Network File System）：通过网络让不同的机器/操作系统共享文件，一般用来共享静态数据 二、部署 NFS 服务端1234567891011121314151617181920212223242526272829# 1. 关闭防火墙$ systemctl stop firewalld &amp;&amp; systemctl disable firewalld# 2. 安装 nfs-utils 和 rpcbind（NFS 客户端也安装）$ yum install -y nfs-utils rpcbind# 3. 创建用于共享数据的文件夹$ mkdir /data/nfs$ chown -R nfsnobody:nfsnobody /data/nfs # TODO 用户影响？# 4. 配置 NFS Server：指定共享文件夹目录以及能够使用共享文件夹的网段$ vi /etc/exports# `NFS共享目录 NFS客户端地址1(参数1,参数2,...) 客户端地址2(参数1,参数2,...)`# /data/nfs 10.17.102.0/24(rw,async,no_root_squash)/data/nfs *(rw,async,no_root_squash) # 对所有 IP 都有效# 5. 启动 NFS Server$ systemctl restart rpcbind$ systemctl enable nfs &amp;&amp; systemctl restart nfs# 6. 测试$ showmount -e 10.17.102.29 # 查看是否有可用的 NFS 地址Export list for 10.17.102.29:/data/nfs *$ nfsstat -s # 查看服务端 NFS 信息Server rpc stats:calls badcalls badclnt badauth xdrcall2822050 0 0 0 0... 1. 服务端配置 常用选项： ro：客户端挂载后，其权限为只读，默认选项 rw：读写权限 sync：同步将数据写入到内存与硬盘中 async：异步，优先将数据保存到内存，然后再写入硬盘 secure：要求请求源的端口小于 1024 用户映射： root_squash：当 NFS 客户端使用 root 用户访问时，映射到 NFS 服务器的匿名用户 no_root_squash：当 NFS 客户端使用 root 用户访问时，映射到 NFS 服务器的 root 用户 all_squash：全部用户都映射为服务器端的匿名用户 anonuid=UID：将客户端登录用户映射为此处指定的用户 uid anongid=GID：将客户端登录用户映射为此处指定的用户 gid 三、部署 NFS 客户端12345678910$ yum install -y nfs-utils rpcbind$ mkdir -p /data/nfs-data# -t nfs：使用nfs协议# -o：挂载选项## nolock：不阻塞## vers=4：NFS版本号为4$ mount -t nfs -o nolock,vers=4 10.17.102.29:/data/nfs /data/nfs-data$ df -h # 查看挂载$ umount /data/nfs-data # 卸载挂载$ nfsstat -c # 查看客户端 NFS 信息","link":"/Linux/centos7-nfs-server.html"},{"title":"Windows OpenSSH 密钥管理","text":"适用于 Windows Server 2019、Windows 10、Windows Server 2022 文章完成了对 Windows 上的 OpenSSH 使用基于密钥的身份验证所需的配置。完成此项后，用户可以从具有私钥的任何客户端连接到 sshd 主机 1. 常见身份认证 Windows 环境中的大多数身份验证都是使用用户名/密码对完成的，这非常适用于共享公共域的系统。跨域工作时（例如在本地和云托管的系统之间），很容易受到暴力攻击入侵 相比之下，Linux 环境通常使用公钥/私钥对来驱动身份验证，这不要求使用可推测的密码。OpenSSH 提供了工具来帮助支持此用途，具体如下： ssh-keygen：用于生成安全的密钥 ssh-agent 和 ssh-add：用于安全地存储私钥 scp 和 sftp：在首次使用服务器时安全地复制公钥文件 2. 密钥对概述 密钥对指的是由特定的身份验证协议使用的公钥和私钥文件 SSH 公钥身份验证使用不对称加密算法来生成两个密钥文件：一个为“私钥”文件，一个为“公钥”文件 私钥：等效于密码，在所有情况下都应当保护它们。如果有人获取了你的私钥，则他们可以像你一样登录到你有权登录的任何 SSH 服务器 公钥：放置在 SSH 服务器上，并且可以共享，不会危害私钥的安全 将密钥身份验证用于 SSH 服务器时，SSH 服务器和客户端会依据私钥来比较所提供的用户名的公钥。 如果无法依据客户端私钥验证服务器端公钥，则身份验证失败 可以通过密钥对实现多重身份验证，方法是在生成密钥对时输入密码。在身份验证期间，会提示用户输入密码，将使用该密码以及 SSH 客户端上的私钥来对用户进行身份验证 3. 主机密钥生成 首先需要安装 OpenSSH 服务器，参考 OpenSSH 入门 公钥具有特定的 ACL 要求，在 Windows 上，这些要求等同于仅允许管理员和 System 进行访问。首次使用 sshd 时，将自动生成主机的密钥对 默认情况下，sshd 服务设置为手动启动。若要在每次重新启动服务器时启动它，请从服务器上的 PowerShell 中运行以下命令： 12345# Set the sshd service to be started automatically$ Get-Service -Name sshd | Set-Service -StartupType Automatic# Now start the sshd service$ Start-Service sshd 由于没有与 sshd 服务关联的用户，因此主机密钥存储在 C:\\ProgramData\\ssh 下 4. 用户密钥生成 若要使用基于密钥的身份验证，首先需要为客户端生成公钥/私钥对 ssh-keygen.exe 用于生成密钥文件，并且可以指定算法 DSA、RSA、ECDSA 或 Ed25519。如果未指定算法，则使用 RSA。建议使用强算法和密钥长度 以下为使用 Ed25519 算法生成密钥文件的流程： 12345678910111213141516171819202122232425262728$ ssh-keygen -t ed25519Generating public/private ed25519 key pair.Enter file in which to save the key (C:\\Users\\Test/.ssh/id_ed25519):Enter passphrase (empty for no passphrase):Enter same passphrase again:Your identification has been saved in C:\\Users\\Test/.ssh/id_ed25519.Your public key has been saved in C:\\Users\\Test/.ssh/id_ed25519.pub.The key fingerprint is:SHA256:GBoxfWOjq/ss1GziqAOeqlQgYcYKSBV1x8hxinSRTUQ test@DESKTOP-GQT4EP9The key's randomart image is:+--[ED25519 256]--+|=+.o=+.=@E ||=o .o=+Oo ||+. ...= o ||o . o.o || ..o..S ||. . o = ||o..+ + ||oo. +. ||*o .+o |+----[SHA256]-----+$ cd C:\\Users\\Test\\.ssh$ dirMode LastWriteTime Length Name---- ------------- ------ -----a---- 2021/11/18 18:50 411 id_ed25519 # 私钥-a---- 2021/11/18 18:50 103 id_ed25519.pub # 公钥-a---- 2021/11/17 15:44 92 known_hosts 私钥文件等效于密码，应当采用与保护密码相同的方式来保护它。为了实现此目的，请使用 ssh-agent 来将私钥安全地存储在与你的 Windows 登录关联的 Windows 安全上下文中 为执行该操作，请以管理员身份启动 ssh-agen 服务并使用 ssh-add 来存储私钥： 123456789101112# By default the ssh-agent service is disabled. Allow it to be manually started for the next step to work.# Make sure you're running as an Administrator.$ Get-Service ssh-agent | Set-Service -StartupType Manual# Start the service$ Start-Service ssh-agent# This should return a status of Running$ Get-Service ssh-agent# Now load your key files into ssh-agent$ ssh-add ~\\.ssh\\id_ed25519 完成这些步骤后，每当从此客户端进行身份验证需要使用私钥时，ssh-agent 都会自动检索本地私钥，并将其传递到你的 SSH 客户端 强烈建议你将私钥备份到一个安全位置，将其添加到 ssh-agent，然后将其从本地系统中删除。如果使用了强算法（例如此示例中的 Ed25519），则无法从代理中检索私钥 如果你失去了对私钥的访问权限，则必须在你与之交互的所有系统上创建一个新的密钥对并更新公钥 5. 部署公钥 若要使用上面创建的用户密钥，需要将公钥 ~\\.ssh\\id_ed25519.pub 的内容放置在服务器上的一个文本文件中，其名称和位置取决于用户帐户是本地管理员组的成员还是标准用户帐户 (1) 标准用户 公钥 ~\\.ssh\\id_ed25519.pub 的内容需放置在服务器上的一个名为 authorized_keys 的文本文件中，该文件位于 C:\\Users\\username\\.ssh\\ OpenSSH 客户端包括了 scp 来帮助实现此目的，这是一个安全的文件传输实用工具。以下示例将公钥复制到服务器 12345# Make sure that the .ssh directory exists in your server's user account home folder$ ssh username@domain1@contoso.com mkdir C:\\Users\\username\\.ssh\\# Use scp to copy the public key file generated previously on your client to the authorized_keys file on your server$ scp C:\\Users\\Test\\.ssh\\id_ed25519.pub user1@domain1@contoso.com:C:\\Users\\username\\.ssh\\authorized_keys (2) 管理用户 公钥 ~\\.ssh\\id_ed25519.pub 的内容需放置在服务器上的一个名为 administrators_authorized_keys 的文本文件中，该文件位于 \\ 此文件上的 ACL 需要配置为仅允许访问管理员和系统。以下示例将公钥复制到服务器并配置 ACL 12345678# Make sure that the .ssh directory exists in your server's user account home folder$ ssh user1@domain1@contoso.com mkdir C:\\ProgramData\\ssh\\# Use scp to copy the public key file generated previously on your client to the authorized_keys file on your server$ scp C:\\Users\\Test\\.ssh\\id_ed25519.pub user1@domain1@contoso.com:C:\\ProgramData\\ssh\\administrators_authorized_keys# Appropriately ACL the authorized_keys file on your server$ ssh --% user1@domain1@contoso.com icacls.exe &quot;C:\\ProgramData\\ssh\\administrators_authorized_keys&quot; /inheritance:r /grant &quot;Administrators:F&quot; /grant &quot;SYSTEM:F&quot; 此示例演示了创建 administrators_authorized_keys file 的步骤。如果多次运行，则每次都会覆盖此文件。若要为多个管理用户添加公钥，需将此文件附加到每个公钥 参考 OpenSSH 入门 适用于 Windows 的 OpenSSH 密钥管理 | Microsoft Docs NIST 文档 IR 7966","link":"/Win/win-ssh-keygen.html"},{"title":"GitHub + Hexo 搭建个人网站详细教程","text":"文章介绍了使用 GitHub + Hexo（icarus 主题）搭建个人网站的详细教程，包括环境准备、项目初始化、项目运行、构建、部署等具体操作，给出了 icarus 主题的各项配置案例，并且对项目源码进行了个性化修改 1. 环境准备 Node.js（&gt;=10.13）：http://nodejs.org/ Git：http://git-scm.com/ 123456789101112131415161718192021$ npm install hexo-cli -g$ hexo -vhexo-cli: 4.3.0os: win32 10.0.17763node: 16.13.0v8: 9.4.146.19-node.13uv: 1.42.0zlib: 1.2.11brotli: 1.0.9ares: 1.17.2modules: 93nghttp2: 1.45.1napi: 8llhttp: 6.0.4openssl: 1.1.1l+quiccldr: 39.0icu: 69.1tz: 2021aunicode: 13.0ngtcp2: 0.1.0-DEVnghttp3: 0.1.0-DEV 2. 初始化项目 官网：https://ppoffice.github.io/hexo-theme-icarus/ 12345678$ hexo init blog$ cd blog$ git clone https://github.com/ppoffice/hexo-theme-icarus.git themes/icarus -b 4.3.0 --depth 1$ hexo config theme icarus$ hexo server$ npm install --save hexo-deployer-git # 部署时用到$ npm install 若报错 err: Error: Cannot find module 'babel-plugin-inferno'，可删除 node_modules/ 和 package-lock.json，再执行 npm install 3. Hexo 常用命令12345678910# 启动$ hexo s [-i 192.168.1.1] [-p 5000]# 清除缓存$ hexo clean# 新建博文$ hexo n &quot;title&quot;# 生成结果$ hexo g# 部署$ hexo d 4. 配置文件设置_config.page.yml 1widgets: null _config.post.yml 123456789101112131415widgets: - position: left type: toc index: false collapsed: false depth: 3 - position: left type: adsense client_id: 'ca-pub-3689070375600295' slot_id: '8031940281'sidebar: left: sticky: true _config.icarus.ymlversion: 4.0.0variant: cyberpunklogo: /img/logo.svghead: favicon: /img/logo.svg # https://developer.mozilla.org/en-US/docs/Web/Manifest manifest: name: LB477 short_name: LB start_url: theme_color: background_color: display: standalone icons: - src: '' sizes: '' type: # https://hexo.io/docs/helpers.html#open-graph open_graph: title: type: blog url: image: site_name: author: description: twitter_card: twitter_id: twitter_site: google_plus: fb_admins: fb_app_id: # https://developers.google.com/search/docs/guides/intro-structured-data structured_data: title: description: url: author: publisher: publisher_logo: image: meta: - '' rss: navbar: menu: Home: / Categories: /categories Tags: /tags Archives: /archives #About: /about links: Download on GitHub: icon: fab fa-github url: 'https://github.com/liubin477'footer: links: Creative Commons: icon: fab fa-creative-commons url: 'https://creativecommons.org/' Attribution: icon: fab fa-creative-commons-by url: 'https://creativecommons.org/licenses/by/4.0/' Noncommercial: icon: fab fa-creative-commons-nc url: 'https://creativecommons.org/licenses/by-nc/4.0/'article: highlight: # https://github.com/highlightjs/highlight.js/tree/master/src/styles theme: rainbow clipboard: true fold: unfolded readtime: false licenses: Creative Commons: icon: fab fa-creative-commons url: 'https://creativecommons.org/' Attribution: icon: fab fa-creative-commons-by url: 'https://creativecommons.org/licenses/by/4.0/' Noncommercial: icon: fab fa-creative-commons-nc url: 'https://creativecommons.org/licenses/by-nc/4.0/'# https://ppoffice.github.io/hexo-theme-icarus/categories/Plugins/Search/search: type: insight# https://ppoffice.github.io/hexo-theme-icarus/categories/Plugins/Comment/comment: type: valine app_id: *** app_key: *** placeholder: &quot;（づ￣3￣）づ╭❤～&quot; avatar: wavatar avatar_force: false meta: [&quot;nick&quot;, &quot;mail&quot;, &quot;link&quot;] page_size: 10 lang: zh-CN visitor: false highlight: true record_ip: true server_urls: emoji_cdn: emoji_maps: enable_qq: false required_fields: []# https://ppoffice.github.io/hexo-theme-icarus/categories/Plugins/Donation/donates: - type: alipay qrcode: '/img/alipay.png' - type: wechat qrcode: '/img/wechat.png'# https://ppoffice.github.io/hexo-theme-icarus/categories/Plugins/Share/share: type: addtoanysidebar: left: sticky: false right: sticky: false# http://ppoffice.github.io/hexo-theme-icarus/categories/Widgets/widgets: - position: left type: profile author: LB author_title: location: Mars avatar: /img/head.jpg avatar_rounded: true gravatar: follow_link: 'https://github.com/liubin477' social_links: Github: icon: fab fa-github url: 'https://github.com/liubin477' CNBlogs: icon: fas fa-edit url: 'https://www.cnblogs.com/lb477' - position: left type: archives - position: right type: categories - position: right type: tags - position: right type: recent_posts - position: left type: adsense client_id: 'ca-pub-3689070375600295' slot_id: '8031940281'# -# position: left# type: links# links:# Hexo: 'https://hexo.io'# Bulma: 'https://bulma.io'# # Google FeedBurner email subscription widget configurations# -# position: left# type: subscribe_email# # Hint text under the email input# description: # # Feedburner ID# feedburner_id: ''# https://ppoffice.github.io/hexo-theme-icarus/categories/Plugins/plugins: # Enable page startup animations animejs: true # Show the &quot;back to top&quot; button back_to_top: true # https://tongji.baidu.com baidu_analytics: tracking_id: *** # https://www.bing.com/toolbox/webmaster/ bing_webmaster: tracking_id: *** # http://busuanzi.ibruce.info busuanzi: true # CNZZ statistics # https://www.umeng.com/web cnzz: id: *** web_id: *** # https://www.osano.com/cookieconsent/ cookie_consent: # The compliance type. Can be &quot;info&quot;, &quot;opt-in&quot;, or &quot;opt-out&quot; type: info # Theme of the popup. Can be &quot;block&quot;, &quot;edgeless&quot;, or &quot;classic&quot; theme: edgeless # Whether the popup should stay static regardless of the page scrolls static: false # Where on the screen the consent popup should display position: bottom-left # URL to your site's cookie policy policyLink: 'https://www.cookiesandyou.com/' gallery: true # https://analytics.google.com google_analytics: tracking_id: # https://www.hotjar.com/ hotjar: site_id: # https://katex.org/ katex: false # https://www.mathjax.org/ mathjax: false # http://outdatedbrowser.com/ outdated_browser: false # Show a progress bar at top of the page on page loading progressbar: true # https://statcounter.com/ statcounter: project: security: # https://business.twitter.com/en/help/campaign-measurement-and-analytics/conversion-tracking-for-websites.html twitter_conversion_tracking: pixel_id: # https://ppoffice.github.io/hexo-theme-icarus/Configuration/icarus-user-guide-cdn-providers/providers: cdn: jsdelivr fontcdn: google iconcdn: fontawesome _config.yml 12345678910111213# ...url: https://lb477.xyzpermalink: :title.htmlpermalink_defaults:pretty_urls: trailing_index: true # Set to false to remove trailing 'index.html' from permalinks trailing_html: true # Set to false to remove trailing '.html' from permalinksdeploy: type: git repo: git@github.com:liubin477/liubin477.github.io.git branch: master 5. 不显示文件更新时间themes/icarus/layout/common/article.jsx 1234{/* Last Update Date */}{/*page.updated &amp;&amp; &lt;span class=&quot;level-item&quot; dangerouslySetInnerHTML={{ __html: _p('article.updated_at', `&lt;time dateTime=&quot;${date_xml(page.updated)}&quot; title=&quot;${new Date(page.updated).toLocaleString()}&quot;&gt;${date(page.updated)}&lt;/time&gt;`)}}&gt;&lt;/span&gt;*/} 6. 设置文章绝对发布时间themes/icarus/source/js/main.js 12345// if (typeof moment === 'function') {// $('.article-meta time').each(function() {// $(this).text(moment($(this).attr('datetime')).fromNow());// });// } 7. 页面整体宽度调整themes/icarus/include/style/responsive.styl 12345678910111213+widescreen() .is-1-column .container, .is-2-column .container max-width: $desktop width: $desktop+fullhd() .is-2-column .container max-width: $widescreen width: $widescreen .is-1-column .container max-width: $desktop width: $desktop themes/icarus/layout/common/widgets.jsx 12case 2: return 'is-4-tablet is-4-desktop is-3-widescreen'; themes/icarus/layout/layout.jsx 12'is-8-tablet is-8-desktop is-9-widescreen': columnCount === 2,'is-8-tablet is-8-desktop is-6-widescreen': columnCount === 3 8. 文章图片居中themes/icarus/source/js/main.js 1$(this).wrap('&lt;a class=&quot;gallery-item&quot; style=&quot;display:block;text-align:center;&quot; href=&quot;' + $(this).attr('src') + '&quot;&gt;&lt;/a&gt;'); 9. 部署到 GitHub 在 GitHub 上新建仓库 &lt;username&gt;.github.io 设置 SSH 密钥：Windows OpenSSH 密钥管理 10. 解决主题文件夹无法提交到 Github1234567891011121314$ git rm --cache themes/icarus$ rm -rf themes/icarus/.git$ git statusOn branch masterYour branch is up to date with 'origin/master'.Changes to be committed: (use &quot;git restore --staged &lt;file&gt;...&quot; to unstage) deleted: themes/icarusUntracked files: (use &quot;git add &lt;file&gt;...&quot; to include in what will be committed) themes/","link":"/Other/hexo-icarus-config.html"},{"title":"使用 PicGo 和 Github 自建免费图床","text":"写博客会经常与图片打交道，因此图床是一个不得不考虑的话题。网上有不少三方的，但是用起来总不如自己构建的放心，本文介绍了使用 PicGo 和 GitHub 构建免费好用且稳定的自建图床 一、概述 PicGo 是一个用于快速上传图片并获取图片 URL 链接的工具 PicGo 本体支持如下图床： 七牛图床 v1.0 腾讯云 COS v4\\v5 版本 v1.1 &amp; v1.5.0 又拍云 v1.2.0 GitHub v1.5.0 SM.MS V2 v2.3.0-beta.0 阿里云 OSS v1.6.0 Imgur v1.6.0 特色功能 支持拖拽图片上传 支持快捷键上传剪贴板里第一张图片 Windows 和 MacOS 支持右键图片文件通过菜单上传 (v2.1.0+) 上传图片后自动复制链接到剪贴板 支持自定义复制到剪贴板的链接格式 支持修改快捷键，默认快速上传快捷键：command+shift+p（macOS）| control+shift+p（Windows\\Linux) 支持插件系统，已有插件支持 Gitee、青云等第三方图床 更多第三方插件以及使用了 PicGo 底层的应用可以在 Awesome-PicGo 找到 支持通过发送 HTTP 请求调用 PicGo 上传（v2.2.0+) 下载网址：https://github.com/Molunerfinn/PicGo 二、Github 配置1. 创建 Github 仓库 创建一个 public 的 Github 仓库，仓库名为 blog-images。过程略 2. 创建访问令牌 直接访问 https://github.com/settings/tokens，点击 Generate new token 按照下图配置创建即可 三、PicGo 配置 点击左侧的图床设置，找到 Github 图床，配置如下： 可选：在 PicGo 设置中开启上传前重命名 四、Typora 配置","link":"/Other/picgo-github-images.html"},{"title":"MySQL 概述","text":"文章对数据库做了全面的概述，介绍了常见的数据库管理系统，对比了关系型数据库与非关系型数据库，并对 MySQL 数据库做了系统的概述 一、数据库概述1. 为什么使用数据库 持久化（persistence）：把数据保存到可掉电式存储设备中以供之后使用。如将内存中的数据保存到硬盘 持久化主要是将内存中的数据存储在关系型数据库中，也可以存储在磁盘文件、XML数据文件中 数据库存储优势：存储的数据量大、优化查询、数据结构更复杂等 2. 相关概念 DBMS（Database Management System, 数据库管理系统）：是一种操纵和管理数据库的大型软件，用于建立、使用和维护数据库，对数据库进行统一管理和控制。用户可以通过数据库管理系统访问数据库中表内的数据 数据库管理系统可以管理多个数据库，一般开发人员会针对每一个应用创建一个数据库 DB（Database, 数据库）：即存储数据的“仓库”，其本质是一个文件系统，保存了一系列有组织的数据 为保存应用中实体的数据，一般会在数据库中创建多个表，以保存程序中的实体数据 SQL（Structured Query Language, 结构化查询语言）：专门用来与数据库通信的语言 3. 常见的数据库管理系统 目前互联网上常见的数据库管理软件有 Oracle、MySQL、MS SQL Server、DB2、PostgreSQL、Access、Sybase、Informix 等 可在 DB-Engines Ranking 网站查看数据库排名 Oracle 1979 年，Oracle 2 诞生，它是第一个商用的 RDBMS（关系型数据库管理系统）。随着 Oracle 软件的名气越来越大，公司也改名叫 Oracle 公司 2007 年，总计 85 亿美金收购 BEA Systems（JRocket） 2009 年，总计 74 亿美金收购 SUN。此前的 2008 年，SUN 以 10 亿美金收购 MySQL。意味着 Oracle 同时拥有了 MySQL 的管理权，至此 Oracle 在数据库领域中成为绝对的领导者 2013 年，甲骨文超越 IBM，成为继 Microsoft 后全球第二大软件公司 如今 Oracle 的年收入达到了 400 亿美金，足以证明商用数据库软件的价值 SQL Server SQL Server 是微软开发的大型商业数据库，诞生于 1989 年 C#、.net 等语言常使用，与 WinNT 完全集成，也可以很好地与 Microsoft BackOffice 产品集成 DB2 IBM 公司的数据库产品，收费，常应用在银行系统中 PostgreSQL PostgreSQL 的稳定性极强，最符合 SQL 标准，开源，具备商业级 DBMS 质量 对数据量大的文本以及 SQL 处理较快 SyBase 已经淡出历史舞台。提供了一个非常专业数据建模工具 PowerDesigner SQLite 嵌入式的小型数据库，应用在手机端 零配置：SQlite3 不用安装、配置、启动、关闭或者配置数据库实例 当系统崩溃后不用做任何恢复操作，下次使用数据库的时候自动恢复 informix IBM 公司出品，取自 Information 和 Unix 的结合，它是第一个被移植到 Linux 上的商业数据库产品 仅运行于 unix/linux 平台，命令行操作。性能较高，支持集群，适应于安全性要求极高的系统，尤其是银行，证券系统的应用 二、MySQL 概述1. 介绍 MySQL 是一个开源关系型数据库管理系统，由瑞典 MySQL AB（创始人 Michael Widenius）公司 1995 年开发，迅速成为开源数据库的 No.1 2008 年被 Sun 收购（10 亿美金），2009 年 Sun 被 Oracle 收购。MariaDB 应运而生（MySQL 的创造者担心 MySQL 有闭源的风险，因此创建了 MySQL 的分支项目 MariaDB） MySQL 6.x 版本之后分为社区版和商业版 MySQL 是一种关联数据库管理系统，将数据保存在不同的表中，而不是将所有数据放在一个大仓库内，这样就增加了速度并提高了灵活性 MySQL 是可以定制的，采用了 GPL（GNU General Public License）协议，可以修改源码来开发自己的 MySQL 系统 MySQL 可以处理拥有上千万条记录的大型数据库。32 位系统表文件最大可支持 4GB，64 位系统支持最大的表文件为 8TB MySQL 可以允许运行于多个系统上，并且支持多种语言。包括 C、C++、Python、Java、Perl、PHP 和 Ruby 等 2. 发展史 MySQL 的历史就是整个互联网的发展史。互联网业务从社交领域、电商领域到金融领域的发展，推动着应用对数据库需求的提升，对传统的数据库服务能力提出了挑战。高并发、高性能、高可用、轻资源、易维护、易扩展的需求，促进了 MySQL 的长足发展 3. 优点 开放源代码，使用成本低 性能卓越，服务稳定 软件体积小，使用简单，并且易于维护 历史悠久，社区用户非常活跃，遇到问题可以寻求帮助 许多互联网公司在用，经过了时间的验证 4. 与 Oracle 对比 Oracle 更适合大型跨国企业的使用，因为他们对费用不敏感，但是对性能要求以及安全性有更高的要求 MySQL 由于其体积小、速度快、总体拥有成本低，可处理上千万条记录的大型数据库，尤其是开放源码这一特点，使得很多互联网公司、中小型网站选择了 MySQL 作为网站数据库（Facebook、Twitter、YouTube、阿里巴巴/蚂蚁金服、去哪儿、美团、腾讯等） 5. 关于 MySQL 8.0 MySQL 从 5.7 版本直接跳跃发布了 8.0 版本，可见这是一个令人兴奋的里程碑版本 MySQL 8 版本在功能上做了显著的改进与增强，开发者对 MySQL 的源代码进行了重构，最突出的一点是对 MySQL Optimizer 优化器进行了改进。不仅在速度上得到了改善，还为用户带来了更好的性能和更棒的体验 三、关系型数据库1. 介绍 关系型数据库是最古老的数据库类型，关系型数据库模型把复杂的数据结构归结为简单的二元关系（即二维表格形式） 关系型数据库以行（row）和列（column）的形式存储数据，以便于用户理解。这一系列的行和列被称为表（table），一组表组成了一个库（database） 关系型数据库就是建立在关系模型基础上的数据库：表与表之间的数据记录有关系（relationship），现实世界中的各种实体以及实体之间的各种联系均用关系模型来表示 SQL 就是关系型数据库的查询语言 2. 优点 复杂查询：可以用 SQL 语句方便的在一个表以及多个表之间做非常复杂的数据查询 支持事务：使得对于安全性能很高的数据访问要求得以实现 3. 关系模型 E-R（entity-relationship, 实体-联系）模型中有三个主要概念是：实体集、属性、联系集 一个实体集（class）对应于数据库中的一个表（table），一个实体（instance）则对应于数据库表中的一行（row），也称为一条记录（record）。一个属性（attribute）对应于数据库表中的一列（column），也称为一个字段（field） (1) 一对一关联 在实际的开发中应用不多，因为一对一可以创建成一张表 举例：将学生表（学号、姓名、手机号码、班级、系别、身份证号码、家庭住址、籍贯、紧急联系人、…）拆分为两张表 基础信息表（学号、姓名、手机号码、班级、系别） 档案信息表（学号、身份证号码、家庭住址、籍贯、紧急联系人、…） 两种建表原则： 外键唯一：主表的主键和从表的外键（需唯一），形成主外键关系 外键是主键：主表的主键和从表的主键，形成主外键关系 (2) 一对多关联 举例： 员工表（编号、姓名、…、所属部门） 部门表（编号、名称、简介） 建表原则：在从表（n）创建一个字段，字段作为外键指向主表（1）的主键 (3) 多对多关联 要表示多对多关系，必须创建第三个表，该表通常称为联接表，它将多对多关系划分为两个一对多关系。将这两个表的主键都插入到第三个表中 举例：“订单”表和“产品”表有多对多的关系，这种关系是通过与“订单明细”表建立两个一对多关系来定义的。一个订单可以有多个产品，每个产品可以出现在多个订单中 产品表：“产品”表中的每条记录表示一个产品 订单表：“订单”表中的每条记录表示一个订单 订单明细表：每个产品可以与“订单”表中的多条记录对应，即出现在多个订单中。一个订单可以与“产品”表中的多条记录对应，即包含多个产品 (4) 自关联 四、非关系型数据库1. 介绍 非关系型数据库可看成传统关系型数据库的功能阉割版本：基于键值对存储数据，不需要经过 SQL 层的解析，性能非常高。同时，通过减少不常用的功能，进一步提高性能 目前基本上大部分主流的非关系型数据库都是免费的 相比于 SQL，NoSQL 泛指非关系型数据库，包括了榜单上的键值型数据库、文档型数据库、搜索引擎和列存储等，除此以外还包括图形数据库。也只有用 NoSQL 一词才能将这些技术囊括进来 2. NoSQL 的演变 由于 SQL 一直称霸 DBMS，因此许多人在思考是否有一种数据库技术能远离 SQL，于是 NoSQL 诞生了，但是随着发展却发现越来越离不开 SQL。到目前为止 NoSQL 阵营中的 DBMS 都会有实现类似 SQL 的功能 下面是“NoSQL”这个名词在不同时期的诠释，从这些释义的变化中可以看出 NoSQL 功能的演变： 1970：NoSQL = We have no SQL 1980：NoSQL = Know SQL 2000：NoSQL = No SQL 2005：NoSQL = Not only SQL 2013：NoSQL = No, SQL NoSQL 对 SQL 做出了很好的补充，比如实际开发中，有很多业务需求，其实并不需要完整的关系型数据库功能，非关系型数据库的功能就足够使用了。这种情况下，使用性能更高、成本更低的非关系型数据库当然是更明智的选择。比如：日志收集、排行榜、定时器等 3. 常见的非关系型数据库键值型数据库 键值型数据库通过 Key-Value 键值的方式来存储数据，其中 Key 和 Value 可以是简单的对象，也可以是复杂的对象 Key 作为唯一的标识符，优点是查找速度快，在这方面明显优于关系型数据库，缺点是无法像关系型数据库一样使用条件过滤（比如 WHERE），如果你不知道去哪里找数据，就要遍历所有的键，这就会消耗大量的计算 键值型数据库典型的使用场景是作为内存缓存。Redis 是最流行的键值型数据库 文档型数据库 此类数据库可存放并获取文档，文档可以是 XML、JSON 等格式。在数据库中文档作为处理信息的基本单位，一个文档就相当于一条记录。文档数据库所存放的文档，就相当于键值数据库所存放的“值” MongoDB 是最流行的文档型数据库。此外，还有 CouchDB 等 搜索引擎数据库 虽然关系型数据库采用了索引提升检索效率，但是针对全文索引效率却较低。搜索引擎数据库是应用在搜索引擎领域的数据存储形式，由于搜索引擎会爬取大量的数据，并以特定的格式进行存储，这样在检索的时候才能保证性能最优。其核心原理是“倒排索引” 典型产品：Solr、ElasticSearch、Splunk 等 列式数据库 列式数据库是相对于行式存储的数据库，Oracle、MySQL、SQL Server 等数据库都是采用的行式存储（Row-based），而列式数据库是将数据按照列存储到数据库中，这样做的好处是可以大量降低系统的 I/O，适合于分布式文件系统，不足在于功能相对有限。典型产品：HBase 图形数据库 关系型数据用于存储明确关系的数据，但对于复杂关系的数据存储却有些力不从心。如社交网络中人物之间的关系，如果用关系型数据库则非常复杂，用图形数据库将非常简单 图形数据库，利用了图这种数据结构存储了实体（对象）之间的关系。图形数据库最典型的例子就是社交网络中人与人的关系，数据模型主要是以节点和边（关系）来实现，特点在于能高效地解决复杂的关系问题。典型产品：Neo4J、InfoGrid 等","link":"/DB/MySQL/mysql-overview.html"}],"tags":[{"name":"CentOS","slug":"CentOS","link":"/tags/CentOS/"},{"name":"NFS","slug":"NFS","link":"/tags/NFS/"},{"name":"Win","slug":"Win","link":"/tags/Win/"},{"name":"SSH","slug":"SSH","link":"/tags/SSH/"},{"name":"Git","slug":"Git","link":"/tags/Git/"},{"name":"Blog","slug":"Blog","link":"/tags/Blog/"},{"name":"DB","slug":"DB","link":"/tags/DB/"},{"name":"MySQL","slug":"MySQL","link":"/tags/MySQL/"}],"categories":[{"name":"Linux","slug":"Linux","link":"/categories/Linux/"},{"name":"Win","slug":"Win","link":"/categories/Win/"},{"name":"Other","slug":"Other","link":"/categories/Other/"},{"name":"DB","slug":"DB","link":"/categories/DB/"},{"name":"MySQL","slug":"DB/MySQL","link":"/categories/DB/MySQL/"}]}